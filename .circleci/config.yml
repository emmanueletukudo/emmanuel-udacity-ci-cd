version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "

            aws cloudformation delete-stack \
            --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
            aws cloudformation delete-stack \
            --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
orbs:
  slack: circleci/slack@4.1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - slack/notify:
          event: fail
          mentions: "@develop"
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Run front-end test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Run Back-end test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: scan-frontend

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: scan-backend

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: EC2 instance ip to ansible inventory
          command: |
            aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text >> .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/*

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run: apk add --update tar gzip curl
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["00:a5:12:bb:43:0c:61:2d:c4:cd:89:60:6c:5d:ed:36"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip3 install awscli
            aws --version
      - run:
          name: Reboot
          command: |
            reboot
      - run:
          name: View content of inventory.txt
          command: cat .circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/

      - run:
          name: Install awscli
          command: |
            sudo apt-get update -y
            sudo apt-get install awscli -y

      - run:
          name: Run Playbook and Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |
            # apt update && apt install ca-certificates
            # update-ca-certificates -f -v
            echo "insecure" >> ~/.curlrc
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
              #curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
              # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
              curl https://kvdb.io/C7QWz7FG1nPfCno61kMtGG/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - run:
          name: View logs
          command: |
            cat ~/circleci/.npm/_logs/2022-08-23T15_28_43_699Z-debug.log

      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # deploy-backend:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["00:a5:12:bb:43:0c:61:2d:c4:cd:89:60:6c:5d:ed:36"]
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install nodejs, npm and check their version
  #         command: |
  #           apk add curl
  #           apk add --update npm
  #           apk add --update nodejs
  #     - run:
  #         name: Install Ansible
  #         command: |
  #           apk add --update ansible
  #           apk add tar
  #           apk add gzip
  #     - run:
  #         name: Install AwsCli
  #         command: |
  #           #apk add py3-pip
  #           pip3 install awscli

  #     - run:
  #         name: Deploy backend
  #         command: |
  #           echo "Running backend ---"
  #           cd backend
  #           npm i
  #           npm run build
  #           cd ..
  #           tar -C backend -czvf artifact.tar.gz .
  #           mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
  #           mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
  #           echo "Contents of the inventory file is ..."
  #           cat .circleci/ansible/inventory.txt
  #           ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

workflows:
  default:
    jobs:
      - build-frontend:
          context: udacity
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
